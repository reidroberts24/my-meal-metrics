
Nutrition Tracker App Project Description
-----------------------------------------

Project Name: MyMealMetrics

Project Stack: MERN
- Frontend: React, Material UI
- Backend: Node.js with Express.js (for server-side logic and API endpoints)
- Database: MongoDB (for storing user data and food entries)
- Version Control: Git/GitHub

Features:
1. Basic Food Log: Manual entry of foods consumed with portion sizes, and the app calculates calorie and macronutrient content.
2. Daily Nutritional Summary: Provides a summary of total calorie intake and a breakdown of macronutrients for each day.
3. Customizable Goals Setting: Users can set personal nutritional goals (calorie limits, macro ratios) and track their progress.
4. Manual Entry of Nutritional Data: Option for users to manually input nutritional information for foods not in the database.

GitHub Repository Link: https://github.com/reidroberts24/my-meal-metrics
MVP-Backlog:
- 

Product Backlog for Post-MVP:
- Create User login/registration page
- Integration with a food database API for automatic nutrient calculation.
- Adding a feature to track water intake and hydration goals.
- Notifications and reminders for meal logging and goal tracking.

DB SCHEMA:
User Collection:

Each document represents a user.
Includes username, password (hashed), created_at, updated_at.
Can later include fields for personal goals, preferences, etc.
{
  "_id": ObjectId("user123"),
  "username": "user123",
  "password": "hashedPassword",
  "created_at": ISODate("2024-01-01T00:00:00Z"),
  "updated_at": ISODate("2024-01-02T00:00:00Z")
}

Meal Collection:

Each document represents a meal entry.
Fields for calories, fat, carbs, protein, created_at, updated_at.
Include a userId field to associate each meal with a user.
Optionally, include a date field to easily query meals by day/week.
{
  "_id": ObjectId("meal123"),
  "userId": ObjectId("user123"),
  "calories": 500,
  "fat": 20,
  "carbs": 60,
  "protein": 30,
  "created_at": ISODate("2024-01-03T12:00:00Z"),
  "updated_at": ISODate("2024-01-03T13:00:00Z"),
  "date": ISODate("2024-01-03T00:00:00Z")
}

Relationships:

The userId in the Meal collection acts as a foreign key to the User collection.
This allows you to easily find all meals for a specific user.
You can implement more complex queries/aggregations to summarize data (e.g., total calories per day).